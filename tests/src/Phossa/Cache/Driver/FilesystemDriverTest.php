<?php
namespace Phossa\Cache\Driver;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-20 at 08:29:13.
 */
class FilesystemDriverTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FilesystemDriver
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // driver
        $this->object = new FilesystemDriver([
            'hash_level'    => 1,
            'file_pref'     => 'cache.',
            'file_suff'     => '.txt'
        ]);

        /* @var \Phossa\Cache\CachePool $cache */
        $cache  = new \Phossa\Cache\CachePool($this->object);
        $this->cache = $cache;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Phossa\Cache\Driver\FilesystemDriver::get
     */
    public function testGet()
    {
        $cache  = $this->cache;
        $driver = $this->object;

        // save
        $val  = 'wow';
        $item = $cache->getItem('test');
        $item->set($val);
        $cache->save($item);

        // serialized
        $this->assertEquals(serialize($val), $driver->get('test'));

        // thru item
        $item2 = $cache->getItem('test');
        $this->assertEquals($val, $item2->get('test'));
    }

    /**
     * @covers Phossa\Cache\Driver\FilesystemDriver::has
     */
    public function testHas()
    {
        $cache  = $this->cache;
        $driver = $this->object;

        // save
        $val  = 'wow';
        $item = $cache->getItem('test2');
        $item->set($val);
        $item->expiresAfter(300);
        $cache->save($item);


        // not found
        $this->assertEquals(0, $driver->has('test1'));

        // found and return time-stamp
        $has = $driver->has('test2');
        $this->assertTrue(is_int($has));
        $this->assertGreaterThan(time(), $has);
    }

    /**
     * @covers Phossa\Cache\Driver\FilesystemDriver::clear
     */
    public function testClear()
    {
        $this->assertTrue($this->object->clear());
    }

    /**
     * @covers Phossa\Cache\Driver\FilesystemDriver::delete
     */
    public function testDelete()
    {
        $cache  = $this->cache;
        $driver = $this->object;

        // save
        $val  = 'wow';
        $item = $cache->getItem('hz/test4');
        $item->set($val);
        $cache->save($item);

        // serialized
        $this->assertEquals(serialize($val), $driver->get('hz/test4'));

        // delete
        $driver->delete('hz/test4');
        $this->assertEquals(0, $driver->has('hz/test4'));

        // delete by dir
        $cache->save($item);
        $driver->delete('hz/');
        $this->assertEquals(0, $driver->has('hz/test4'));
    }

    /**
     * @covers Phossa\Cache\Driver\FilesystemDriver::save
     */
    public function testSave()
    {
        $cache  = $this->cache;
        $driver = $this->object;

        // save
        $val  = 'wow3';
        $item = $cache->getItem('bingo/test5');
        $item->set($val);
        $item->expiresAfter(1);
        $driver->save($item);

        $this->assertEquals($val, $driver->get('bingo/test5'));
    }

    /**
     * @covers Phossa\Cache\Driver\FilesystemDriver::saveDeferred
     */
    public function testSaveDeferred()
    {
        $cache  = $this->cache;
        $driver = $this->object;

        // save
        $val  = 'wow4';
        $item = $cache->getItem('bingo/wow/test6');
        $item->set($val);
        $item->expiresAfter(1);
        $driver->saveDeferred($item);

        $this->assertEquals($val, $driver->get('bingo/wow/test6'));
    }

    /**
     * @covers Phossa\Cache\Driver\FilesystemDriver::commit
     */
    public function testCommit()
    {

    }

    /**
     * @covers Phossa\Cache\Driver\FilesystemDriver::purge
     */
    public function testPurge()
    {
        sleep(3);
        $this->assertTrue($this->object->purge(1));
    }
}
