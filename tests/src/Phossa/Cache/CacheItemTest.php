<?php
namespace Phossa\Cache;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-20 at 08:29:17.
 */
class CacheItemTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var CacheItem
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // driver
        $driver = new Driver\FilesystemDriver([
            'hash_level'    => 1,
            'file_pref'     => 'cache.',
            'file_suff'     => '.txt'
        ]);

        $this->cache  = new CachePool($driver);

        $this->object = new CacheItem('test', $this->cache, [
            'ttl'   => 60
        ]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Phossa\Cache\CacheItem::getKey
     */
    public function testGetKey()
    {
        $this->assertEquals('test', $this->object->getKey());
    }

    /**
     * @covers Phossa\Cache\CacheItem::get
     */
    public function testGet()
    {
        $this->assertEquals(null, $this->object->get());
    }

    /**
     * @covers Phossa\Cache\CacheItem::isHit
     */
    public function testIsHit()
    {
        $item = $this->object;
        $this->assertFalse($item->isHit());
    }

    /**
     * @covers Phossa\Cache\CacheItem::setHit
     */
    public function testSetHit()
    {
        $item = $this->object;

        $item->setHit(true);
        $this->assertTrue($item->isHit());

        $item->setHit(false);
        $this->assertFalse($item->isHit());
    }

    /**
     * @covers Phossa\Cache\CacheItem::set
     */
    public function testSet()
    {
        $item = $this->object;
        $item->set('wow');

        $this->assertEquals('wow', $item->get());
    }

    /**
     * @covers Phossa\Cache\CacheItem::expiresAt
     */
    public function testExpiresAt()
    {
        $time = time() + 1200;
        $item = $this->object;
        $item->set('wow');
        $item->expiresAt(new \DateTime('@' . $time));

        $this->assertEquals($time, $item->getExpiration()->getTimestamp());
    }

    /**
     * @covers Phossa\Cache\CacheItem::expiresAfter
     */
    public function testExpiresAfter()
    {
        $item = $this->object;
        $item->set('wow');
        $item->expiresAfter(1);

        $this->assertGreaterThan(time(), $item->getExpiration()->getTimestamp());
        sleep(2);
        $this->assertLessThan(time(), $item->getExpiration()->getTimestamp());
    }

    /**
     * @covers Phossa\Cache\CacheItem::getExpiration
     */
    public function testGetExpiration()
    {
        $item = $this->object;
        $item->set('wow');
        $item->expiresAt(new \DateTime('@1200'));

        $this->assertEquals(1200, $item->getExpiration()->getTimestamp());
    }
}
